// const useStyles = makeStyles((theme) => ({
//   container: {
//     display: "flex",
//     flexWrap: "wrap",
//   },
//   textField: {
//     marginLeft: theme.spacing(1),
//     marginRight: theme.spacing(1),
//     width: 200,
//   },
// }));
// const classes = useStyles();
{
  /* <form>
            <div className="inputbox">
              <input
                type="text"
                name="client_name"
                value={`${currentUser?.name} ${currentUser?.lastName}`}
              />
              <span>Nom & PrÃ©nom du patient</span>
            </div>
            <div className="inputbox">
              <input
                type="text"
                value={`${profile1?.name} ${profile1?.lastName}`}
                name="doc_name"
                // disabled={true}
              />
              <span>Nom & PrÃ©nom du docteur</span>
            </div>
            {/* <div className="inputbox">
              {/* <form className={classes.container} noValidate>
                <TextField
                  id="datetime-local"
                  label="Next appointment"
                  type="datetime-local"
                  defaultValue={Date.now()}
                  name="date"
                  onChange={handleChange}
                  className={classes.textField}
                  InputLabelProps={{
                    shrink: true,
                  }}
                />
              </form> 
              <span> date</span>
              
            </div> */
}

//     <div className="inputbox">
//       <Link to={"/dashboard"}>
//         <button
//           className="btn btn-primary"
//           onClick={() => dispatch(postrdv(rdvstate))}
//         >
//           Submit
//         </button>
//       </Link>
//     </div>
//   </form>
//   <Datepicker calendarType="week" calendarSize={1} /> */}

// const [filteredResults, setFilteredResults] = useState([]);
// const [searchInput, setSearchInput] = useState("");
// const searchItems = (searchValue) => {
//   setSearchInput(searchValue);
//   if (searchInput !== "") {
//     const filteredData = listdev.filter((item) => {
//       return Object.values(item)
//         .join("")
//         .toLowerCase()
//         .includes(searchInput.toLowerCase());
//     });
//     setFilteredResults(filteredData);
//   } else {
//     setFilteredResults(listdev);
//   }
// };
// <CardGroup itemsPerRow={3} style={{ marginTop: 20 }}>
//   {searchInput.length > 1 &&
//     filteredResults.map((item) => {
//       return (
//         <Card>
//           <Link to={`/dev/${item._id}`} state={{ dev: item }}>
//             <CardHeader>{item.name}</CardHeader>
//           </Link>
//           <Card>{item.email}</Card>
//         </Card>
//       );
//     })}
// </CardGroup>;

{/* <Autocomplete
  id="free-solo-demo"
  freeSolo
  options={data1?.map(
    (option) => "Dr" + " " + option.lastName + " " + option.name
  )}
  renderInput={(params) => (
    <TextField
      {...params}
      label="Nom & prÃ©nom"
      margin="normal"
      variant="outlined"
    />
  )}
/>; */}

//   const clientID = "iGcS3r0u3xPVywzpmKiu55BoRGT5QQEa"
  //   const token = await getToken(clientID)
  //   let senderAdress = "+2160000"
  //   let address = "+21627914561"
  // try {
  //   await sendSMS(senderAdress, address, "bonjour from node", token)
  //   res.status(200).json({
  //     message: `sms sent successfully`,
  //   });
  // } catch (error) {
  //   console.log(error);
  // }$ch = curl_init();
//     curl_setopt($ch, CURLOPT_URL, 'https://api.orange.com/smsmessaging/v1/outbound/tel%3A%2B21656813222/requests');
//     curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

//     curl_setopt($ch, CURLOPT_POSTFIELDS, "{\"outboundSMSMessageRequest\":{ \n        \"address\": \"tel:+21650908869\", \n        \"senderAddress\"ðŸ˜•"tel:+21656813222\",   \n        \"outboundSMSTextMessage\":{ \n            \"message\": \"test cmd\" \n        } \n, \n \"senderName\"ðŸ˜•"TNT\"    } \n}");

//     curl_setopt($ch, CURLOPT_POST, 1);

//     $headers = array();
//     $headers[] = 'Authorization: Bearer frGygxzVC5mA5JQ4E6B6WOt132cG';
//     $headers[] = 'Content-Type: application/json';
//     curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

//     $result = curl_exec($ch);

//     if (curl_errno($ch)) {
//         echo 'Error:' . curl_error($ch);
//     }
//     curl_close ($ch);
//  dd("saif") 